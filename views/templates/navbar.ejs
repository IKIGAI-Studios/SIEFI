<div class="container">
    <nav class="navbar navbar-expand-sm">
        <a class="navbar-brand">
            <img src="../img/Horizontal-TanukitchenLogo-White.png" 
                        height="50" width="auto" alt="Tanukitchen">
        </a>
        <div class="collapse navbar-collapse justify-content-center" id="tkNavbar">
            <ul class="navbar-nav">
                <li class="nav-item px-4">
                    <a href="/control_panel/" class="nav-link tk-text">Control Panel</a>
                </li>
                <li class="nav-item px-4">
                    <a href="/recipes" class="nav-link tk-text">Recipes</a>
                </li>
                <li class="nav-item px-4">
                    <a href="/profile" class="nav-link tk-text">Profile</a>
                </li>
            </ul>
            </div>
            <img src="https://upload.wikimedia.org/wikipedia/commons/0/04/ChatGPT_logo.svg" width="3%" onclick="chatgpt()">
        <div class="d-flex justify-content-center dropdown tk-text">
            <a href="/profile" class="tk-link align-self-center mx-2"><%= obj.user.user %></a>
            <div class="dropstart tk-text">
                <img class="tk-nb-avatar" src="/img/TanukitchenLogo-White.png" alt="avatar" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    <a class="dropdown-item tk-text" href="/profile">Profile</a>
                    <a class="dropdown-item tk-text" href="/login">Logout</a>
                </div>
            </div>
        </div>
    </nav>
    <div id="div_alert"></div>
</div>

<script>
    /* Primero creamos los objetos para poder grabar nuestra voz con el microfono */
    const recVozGPT = window.SpeechRecognition || window.webkitSpeechRecognition
    const recGPT = new recVozGPT()
    /* metodo que se ejecuta al empezar a granar */
    recGPT.onstart = ()=>{
        console.log('Recording to send Chat GPT...')
    }
    /* Metodo que se ejecuta al terminar la grabaci칩n */
    recGPT.onresult = event =>{
        let mensaje = event.results[0][0].transcript
        console.info(mensaje)
        readCommandGPT(mensaje)
    }
    /* Funci칩n que condiciona la respuesta dependiendo de el contenido de la grabaci칩n */
    const readCommandGPT = async(mensaje)=>{
        const voice = new SpeechSynthesisUtterance()
        let rslt = '';
        // Agregar comandos aqui
        await fetch('/chat-gpt/' + mensaje)
            .then((response) => response.json())
                .then((json) => { rslt = json }
            )
        bsAlert(`You asked Chat GPT: ${mensaje}. <br>This is the answer: ${rslt}`, 'info');
        voice.text = rslt;

        let voices = window.speechSynthesis.getVoices();
        let selectedVoice = voices.find((voice) => voice.name === 'Google espa침ol');
        if (selectedVoice) voice.voice = selectedVoice;
        
        window.speechSynthesis.speak(voice)
    }

    function chatgpt() {
        recGPT.start()
    }

    const bsAlert = (msg, type) => {
        const wrapper = document.createElement('div')
        wrapper.innerHTML = [
            `<div class="alert alert-${type} tk-dark-text alert-dismissible" role="alert" id="alert_navbar">`,
            `   <div>${msg}</div>`,
            '   <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>',
            '</div>'
        ].join('')

        $('#div_alert').append(wrapper)
    }
</script>
